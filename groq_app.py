import streamlit as st #Importing streamlit library for creating web apps
import os #Importing os library to interact with operating system
from groq import Groq #Importing Groq for AI model interaction
import random #Importing random library to generate random numbers

from langchain.chains import ConversationChain #Importing ConversationChain for managing chat conversations
from langchain.memory import ConversationBufferWindowMemory #Importing ConversationBufferWindowMemory for conversation memory management
from langchain_groq import ChatGroq #Importing ChatGroq for Groq chat functionality
from langchain.prompts import PromptTemplate #Importing PromptTemplate for managing chat prompts

from dotenv import load_dotenv #Importing load_dotenv for loading environment variables from .env file

load_dotenv() #Loading environment variables

# The title and greeting message of the Streamlit application
st.title("Chat with Groq!")  # Setting the title of the web app
st.write("Hello! I'm your friendly Groq chatbot. I can help answer your questions, provide information, or just chat. I'm also super fast! Let's start our conversation!")  # Displaying a greeting message

conversational_memory_length = 10  
memory=ConversationBufferWindowMemory(k=conversational_memory_length)  # Initializing conversation memory with the selected length

user_question = st.text_input("Ask a question:")  # Input field for user to ask a question

#session state variable for storing chat history
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = [] #Initializing chat history if not present
else:
    for message in st.session_state.chat_history:
        memory.save_context({'input':message['human']}, {'output':message['AI']})

#Initialize Groq Langchain chat object and conversation
groq_chat = ChatGroq(
    groq_api_key=os.environ.get("GROQ_API_KEY"),
    model_name="mixtral-8x7b-32768",
)

conversation = ConversationChain(
    llm=groq_chat,
    memory=memory,
)

#if user has asked the question
if user_question:
    #the chatbot's answer is generated by sending the full prompt to groq API
    response = conversation(user_question) #generating response from conversation object
    message = {'human': user_question, 'AI': response['response']} #structuring the message
    st.session_state.chat_history.append(message) #appending message to chat history
    st.write("Chatbot:", response['response']) #displaying chatbot's response